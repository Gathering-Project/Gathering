server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: "*"
  prometheus:
    metrics:
      export:
        enabled: true


spring:
  thymeleaf:
    cache: false


  # AWS S3 설정
  cloud:
    aws:
      s3:
        bucket: ${CLOUD_AWS_S3_BUCKET}
      credentials:
        accessKey: ${CLOUD_AWS_S3_ACCESS_KEY}
        secretKey: ${CLOUD_AWS_S3_SECRET_KEY}
      region:
        static: ${CLOUD_AWS_S3_REGION_STATIC}
      stack:
        auto: false

  #MySQL 설정
  config:
    import: optional:file:.env[.properties]
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST}:3306/${MYSQL_DATABASE:gathering_db}?serverTimezone=Asia/Seoul
    username: ${MYSQL_NAME:root}
    password: ${MYSQL_PASSWORD:1234}

  #RabbitMQ 설정
  rabbitmq:
    host: ${rabbitmq_host:localhost}
    port: ${rabbitmq_port:5672}
    virtual-host: ${rabbitmq_virtual_host:/}
    username: ${rabbitmq_username:admin}
    password: ${rabbitmq_password:1234}


  #STOMP 설정
  messaging:
    stomp:
      relay:
        enabled: true
        host: ${rabbitmq_host:localhost}
        port: ${rabbitmq_relay_port:61613}
        system-login: ${rabbitmq_relay_system_login:guest}
        system-passcode: ${rabbitmq_relay_client_passcode:guest}
        client-login: ${rabbitmq_relay_client_login:guest}
        client-passcode: ${rabbitmq_relay_client_passcode:guest}
      broker:
        topic-destination-prefix: /topic
        queue-destination-prefix: /queue
  chat:
    queue:
      name: ${rabbitmq_chat_queue_name}
    exchange:
      name: ${rabbitmq_chat_exchange_name}
    routing:
      key: ${rabbitmq_chat_routing_key}

  # Kafka 설정
  kafka:
    bootstrap-servers: "localhost:19092,localhost:19093,localhost:19094"

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  jpa:
    hibernate:
      ddl-auto: update
      show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  # Redis 설정
  data:
    redis:
      sentinel:
        master:
          host: ${REDIS_HOST:localhost}
          port: 6379
        nodes:
          - ${REDIS_PORT1:localhost}:26379
          - ${REDIS_PORT2:localhost}:26380
          - ${REDIS_PORT3:localhost}:26381
      timeout: 10000

    #MongoDB 설정
    mongodb:
      uri: mongodb://${mongodb_username:root}:${mongodb_password:1234}@${mongodb_host:localhost}:${port:27017}/${database_name:gatherignmongo}?authSource=admin&authMechanism=SCRAM-SHA-1
      username: ${mongodb_username:root}
      password: ${mongodb_password:1234}

    spring:
      data:
        elasticsearch:
          repositories:
            enabled: true
          index:
            create-on-startup: true
            auto_create_index: true


  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      enabled: true

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
              - profile
              - account_email
          naver: # 네이버 OAuth 설정 추가
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - email
              - nickname
            client-name: Naver
            redirect-uri: ${NAVER_REDIRECT_URL}
            authorization-grant-type: authorization_code
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response


payment:
  toss:
    url: ${TOSS_PAYMENTS_URL}
    cancel:
      url: ${TOSS_PAYMENTS_CANCEL_URL}
    secret:
      key: ${TOSS_PAYMENTS_SECRET_KEY}
    client:
      key: ${TOSS_PAYMENTS_CLIENT_KEY}

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

admin:
  token: ${ADMIN_TOKEN}

logging:
  level:
    #    root: DEBUG
    root: INFO
    nbc_final.gathering.domain.payment.service: INFO
    org:
      org.springframework.web.socket: TRACE
      org.springframework.messaging.simp.stomp: TRACE
      org.springframework.messaging.simp.broker: TRACE
      springframework:
        security: ERROR
      hibernate:
        orm:
          jdbc:
            bind: info
frontend:
  url: ${FRONTEND_URL}

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html