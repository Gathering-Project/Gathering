server:
  port: 8080

spring:
  cloud:
    aws:
      s3:
        bucket: ${CLOUD_AWS_S3_BUCKET}
      credentials:
        accessKey: ${CLOUD_AWS_S3_ACCESS_KEY}
        secretKey: ${CLOUD_AWS_S3_SECRET_KEY}
      region:
        static: ${CLOUD_AWS_S3_REGION_STATIC}
      stack:
        auto: false

  config:
    import: optional:file:.env[.properties]
  datasource:
    driver-class-name: org.h2.Driver
    #    url: jdbc:mysql://mysql_container:3306/${MYSQL_DB_NAME}?serverTimezone=Asia/Seoul
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=MYSQL
    username: ${MYSQL_NAME}
    password: ${MYSQL_PASSWORD}
#    username: sa
#    password:

  kafka:
    bootstrap-servers: "localhost:19092,localhost:19093,localhost:19094"
    #  kafka:
    #    bootstrap-servers: "kafka1:9092,kafka2:9093,kafka3:9094"

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  jpa:
    hibernate:
      ddl-auto: update
      show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect

  data:
    redis:
      sentinel:
        master:
          host: localhost
          port: 6379
        nodes:
          - localhost:26379
          - localhost:26380
          - localhost:26381
      timeout: 10000

    elasticsearch:
      client:
        reactive:
          endpoints: http://localhost:9200
      repositories:
        enabled: true
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      enabled: true

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${KAKAO_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
              - profile
              - account_email
          naver: # 네이버 OAuth 설정 추가
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - email
              - nickname
            client-name: Naver
            redirect-uri: ${NAVER_REDIRECT_URL}
            authorization-grant-type: authorization_code
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

admin:
  token: ${ADMIN_TOKEN}

payment:
  toss:
    url: ${TOSS_PAYMENTS_URL}
    cancel:
      url: ${TOSS_PAYMENTS_CANCEL_URL}
    secret:
      key: ${TOSS_PAYMENTS_SECRET_KEY}
    client:
      key: ${TOSS_PAYMENTS_CLIENT_KEY}


logging:
  level:
    org:
      springframework:
        security: ERROR
      hibernate:
        orm:
          jdbc:
            bind: info
frontend:
  url: ${FRONTEND_URL}

