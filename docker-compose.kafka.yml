#version: '3.8'
#
#networks:
#  kafka-network:
#    driver: bridge
#
#services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_SERVER_ID: 1
#      ZOOKEEPER_CLIENT_PORT: 2181
#    ports:
#      - "22181:2181"
#    networks:
#      - kafka-network
#
#  kafka1:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "19092:19092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#    networks:
#      - kafka-network
#
#  kafka2:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "19093:19093"
#    environment:
#      KAFKA_BROKER_ID: 2
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://localhost:19093
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#    networks:
#      - kafka-network
#
#  kafka3:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "19094:19094"
#    environment:
#      KAFKA_BROKER_ID: 3
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://localhost:19094
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#    networks:
#      - kafka-network
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui-test
#    ports:
#      - "8989:8080"
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9093,kafka3:9094
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
#    depends_on:
#      - kafka1
#      - kafka2
#      - kafka3
#    networks:
#      - kafka-network
#
#  gathering:
#    image: gathering
#    env_file:
#      - .env  # .env 파일에서 모든 변수를 가져옴
#    ports:
#      - "8080:8080"
#    depends_on:
#      - kafka1
#    networks:
#      - kafka-network
#    environment:
#      - KAFKA_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094
#      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/gathering  # gathering DB 연결
#      - SPRING_DATASOURCE_USERNAME=root  # MySQL 사용자
#      - SPRING_DATASOURCE_PASSWORD=1234  # MySQL 비밀번호
#
#  matching_service:
#    image: matching
#    env_file:
#      - .env  # .env 파일에서 모든 변수를 가져옴
#    ports:
#      - "6060:6060"
#    depends_on:
#      - kafka1
#    networks:
#      - kafka-network
#    environment:
#      - KAFKA_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/matching  # matching DB 연결
#      - SPRING_DATASOURCE_USERNAME=root  # MySQL 사용자
#      - SPRING_DATASOURCE_PASSWORD=1234  # MySQL 비밀번호
#
#  mysql:
#    container_name: mysql_container
#    networks:
#      - kafka-network
#    env_file:
#      - .env  # .env 파일에서 모든 변수를 가져옴
#    image: mysql:8.0
#    ports:
#      - 3306:3306
#    environment:
#      MYSQL_ROOT_PASSWORD: 1234  # 루트 비밀번호 설정
#      MYSQL_DATABASE: gathering     # 기본 데이터베이스 이름
#    volumes:
#      - mysql_data:/var/lib/mysql  # MySQL 데이터 지속성
#
#volumes:
#  mysql_data:



version: '3.8'

networks:
  kafka-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"
    networks:
      - kafka-network

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://kafka1:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - kafka-network

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9093,EXTERNAL://kafka2:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - kafka-network

  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9094,EXTERNAL://kafka3:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui-test
    ports:
      - "8989:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-network

  gathering:
    image: gathering
    env_file:
      - .env  # .env 파일에서 모든 변수를 가져옴
    ports:
      - "8080:8080"
    depends_on:
      - kafka1
    networks:
      - kafka-network
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/gathering  # gathering DB 연결
#      - SPRING_DATASOURCE_USERNAME=root  # MySQL 사용자
      - SPRING_DATASOURCE_USERNAME=${MYSQL_NAME}  # MySQL 사용자
#      - SPRING_DATASOURCE_PASSWORD=1234  # MySQL 비밀번호
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}  # MySQL 비밀번호

  matching_service:
    image: matching
    env_file:
      - .env  # .env 파일에서 모든 변수를 가져옴
    ports:
      - "6060:6060"
    depends_on:
      - kafka1
    networks:
      - kafka-network
    environment:
      - KAFKA_BROKERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/matching  # matching DB 연결
#      - SPRING_DATASOURCE_USERNAME=root  # MySQL 사용자
      - SPRING_DATASOURCE_USERNAME=${MYSQL_NAME}  # MySQL 사용자
#      - SPRING_DATASOURCE_PASSWORD=1234  # MySQL 비밀번호
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}  # MySQL 비밀번호

  mysql:
    container_name: mysql_container
    networks:
      - kafka-network
    env_file:
      - .env  # .env 파일에서 모든 변수를 가져옴
    image: mysql:8.0
    ports:
      - 3306:3306
    environment:
#      MYSQL_ROOT_PASSWORD: 1234  # 루트 비밀번호 설정
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # 루트 비밀번호 설정
      MYSQL_DATABASE: gathering     # 기본 데이터베이스 이름
    volumes:
      - mysql_data:/var/lib/mysql  # MySQL 데이터 지속성

volumes:
  mysql_data:
